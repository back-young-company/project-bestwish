# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Deploy

on:
  push:
    branches: [ "release/*" ] # release로 시작하는 브랜치가 push되면 액션 시작

jobs:
  deploy:

    runs-on: macos-latest

    env:
      XC_WORKSPACE: ${{ 'BestWish.xcodeproj' }} # 여기서는 .xcodeproj을 사용하고 계시네요. SPM을 사용한다면 .xcworkspace로 변경하는 것이 더 안전합니다. 아래에서 설명.
      XC_SCHEME: ${{ 'BestWish' }}
      XC_ARCHIVE: ${{ 'BestWish.xcarchive' }}

      # certificate
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/BestWish_Certification.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/BestWish_Certification.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERTS_ENCRYPTION_PWD }} # gpg로 파일 암호화할 때 사용한 암호

      # provisioning
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/BestWish_GitHub_Actions.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/BestWish_GitHub_Actions.mobileprovision' }}

      ENCRYPTED_SHARE_PROVISION_FILE_PATH: ${{ '.github/secrets/BestWish_GitHub_Actions_ShareExtension.mobileprovision.gpg' }}
      DECRYPTED_SHARE_PROVISION_FILE_PATH: ${{ '.github/secrets/BestWish_GitHub_Actions_ShareExtension.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISION_ENCRYPTION_PWD }} # gpg로 파일 암호화할 때 사용한 암호
      # certification export key
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_PWD }}
      KEYCHAIN: ${{ 'test.keychain' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean Xcode DerivedData and SPM Cache # <--- 이 스텝을 추가합니다!
      run: |
        echo "Cleaning Xcode DerivedData..."
        rm -rf "$HOME/Library/Developer/Xcode/DerivedData"
        echo "Cleaning Swift Package Manager Cache..."
        rm -rf "$HOME/Library/Caches/org.swift.swiftpm"
        echo "Clean up complete."

    - name: Use Xcode 16.2
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Configure Keychain # 키체인 초기화 - 임시 키체인 생성
      run: |
        security create-keychain -p "" "$KEYCHAIN"
        security list-keychains -s "$KEYCHAIN"
        security default-keychain -s "$KEYCHAIN"
        security unlock-keychain -p "" "$KEYCHAIN"
        security set-keychain-settings
        
    - name : Configure Code Signing
      run: |
        gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
        gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
        gpg -d -o "$DECRYPTED_SHARE_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_SHARE_PROVISION_FILE_PATH"
        security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
        security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"

        mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"

        for PROVISION in $(ls .github/secrets/*.mobileprovision) # 여기를 $(ls ...) 로 변경
        do
          UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i "$PROVISION")) # "$PROVISION" 에 따옴표 추가
          cp "$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision" # "$PROVISION" 에 따옴표 추가
        done
        
    - name: Configuraion file setting
      run: |
        echo "API_KEY = ${{ secrets.CONFIG_API_KEY }}" > BestWish/Config_Release.xcconfig
        echo "SUPABASE_URL = ${{ secrets.CONFIG_SUPABASE_URL }}" >> BestWish/Config_Release.xcconfig
        echo "CLIENT_ID = ${{ secrets.CONFIG_CLIENT_ID }}" >> BestWish/Config_Release.xcconfig
        echo "SHARING_KEY = ${{ secrets.CONFIG_SHARING_KEY }}" >> BestWish/Config_Release.xcconfig

        echo "API_KEY = ${{ secrets.CONFIG_API_KEY }}" > BestWish/Config_ShareExtension_Release.xcconfig
        echo "SUPABASE_URL = ${{ secrets.CONFIG_SUPABASE_URL }}" >> BestWish/Config_ShareExtension_Release.xcconfig
        echo "CLIENT_ID = ${{ secrets.CONFIG_CLIENT_ID }}" >> BestWish/Config_ShareExtension_Release.xcconfig
        echo "SHARING_KEY = ${{ secrets.CONFIG_SHARING_KEY }}" >> BestWish/Config_ShareExtension_Release.xcconfig
        
    - name: Archive app
      run: |
        xcodebuild clean archive -project BestWish.xcodeproj \
          -scheme "${{ env.XC_SCHEME }}" \
          -destination "generic/platform=iOS" \
          -archivePath "${{ env.XC_ARCHIVE }}" \
          -verbose \
          CODE_SIGN_IDENTITY="${{ env.IOS_APP_CODE_SIGN_IDENTITY }}" \
          CODE_SIGN_BESTWISH_ENTITLEMENTS="BestWish/BestWish.entitlements" \
          CODE_SIGN_BESTWISH_SHARE_EXTENSION_ENTITLEMENTS="BestWishShareExtension/BestWishShareExtension.entitlements" \
          PROVISIONING_PROFILE_SPECIFIER="${{ env.IOS_APP_PROVISIONING_PROFILE_SPECIFIER }}" \
          DEVELOPMENT_TEAM="${{ env.DEVELOPMENT_TEAM_ID }}" \
          "BestWish_CODE_SIGN_ENTITLEMENTS=CODE_SIGN_BESTWISH_ENTITLEMENTS" \
          "BestWishShareExtension_CODE_SIGN_ENTITLEMENTS=CODE_SIGN_BESTWISH_SHARE_EXTENSION_ENTITLEMENTS" \
          "BestWishShareExtension_CODE_SIGN_IDENTITY=${{ env.IOS_SHARE_EXTENSION_CODE_SIGN_IDENTITY }}" \
          "BestWishShareExtension_PROVISIONING_PROFILE_SPECIFIER=${{ env.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_SPECIFIER }}" \
          "BestWishShareExtension_DEVELOPMENT_TEAM=${{ env.DEVELOPMENT_TEAM_ID }}"

    - name: Export app
      run: |
        xcodebuild -exportArchive -archivePath $XC_ARCHIVE -exportOptionsPlist ExportOptions.plist -exportPath . -allowProvisioningUpdates

    - name: Upload app to TestFlight
      uses: apple-actions/upload-testflight-build@v1
      with:
        app-path: 'BestWish.ipa'
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
